* Can we eliminate duplication of converting values? Possibly try try.
* Refactor Value handling of fractions - can we use Regex transform?

* MC, MR, M+, M-

* Comma in long numbers
* Print history
  + https://www.hackingwithswift.com/example-code/uikit/how-to-print-using-uiactivityviewcontroller
  + https://thomas.skowron.eu/blog/printing-with-swiftui/

* Let users type into history?

* Store history, restore on app restart

* Pleat calculator ("Z"?)

* Make calculator have a state machine for valid expressions (not including balancing parentheses) - or state machine plus parenthesis counter
* Disable calculator buttons that can't be used (e.g., no ')' if there's not been a '(')
* Ways to show parends need work - hint counter? grayed-out right parends? long press to close all? automatically insert?
* If you start with an operator, you should load the previous result as the first operand (?) - or pointing hand to previous result?

* Separate error field, so we can keep editing?

* Update EGTest to take new check() with try from ContentViewTests
* Update EGTest with EGAssert
* Add EGAssert(actual, eg)
* Let check use varargs rather than []

CALC-23-19: 2023-06-22 - Refactor Value; Add Memory
* [off camera] Updated test template from @qcoding


CALC-23-18: 2023-06-21 - History
Off Camera
* Drop %

History
* Don't show history after start
* History (a scrollable view with all expressions)
* Clear history
* Delete individual history items
* split big regex
* Punted on storing or printing history

Refactor Fractions
* Drop / or // only (enter fractions)

CALC-23-17: 2023-06-20 - Whole Numbers and Fractions
Entering Fractions
* decimal point - 314.15
* implicit 8ths - 314.1/
* implicit 16ths - 314.1//
* explicit fraction - 314.1/5

Look and Feel
* Bold "display in"

CALC-23-16: 2023-06-19 - Entering Fractions
* [off camera] Converted all ContentViewTests to CalculatorTests
* [off camera] Moved EG extensions to EGTest+extensions.swift
* [off camera] Eliminated ViewInspector and restored Grid
* [off camera] Tweaked logo - red stripes, yellow text
* [off camera] Released beta to my (one:) user
* Switch "/" and "+/-"
* implicit 16ths - 314//
* implicit 8ths - 314/
* 314/15        — explicit fraction (note that 1/2/3 is error)
* Started on point

CALC-23-15: 2023-06-15 - Rounding Units
[off camera] Gave CalculatorTests a mini-language for expressions (like ContentViewTests has); switched to EG tests
[off camera] Made EGAssert that takes actual value and EG
[off camera] Added background
* Rounding: Make unit formatter use the new numeric formatting
* Added a one-expression history display
* Tweaked look of background and buttons

CALC-23-14: 2023-06-14 - Rounding to 8ths and 16ths
* modf
* Round to 8ths and 16ths
* Rounding should be to 16ths, but simplifying any even 8ths (12/16 => 6/8)
* Show "skosh" characters - ⊕ (rounded down), ⊖ (rounded up)

CALC-23-13: 2023-06-13 - Choose Units for Display
* [Off camera: Tweak "Show As" wording]
* [Off camera: rename to KiltCalc]
* [Off camera: Add onDisplay() as per ViewInspector instructions about @State - but still have intermittent failures]

Unit Display
* Set unit display format with picker; default to inches

Rounding
* Rounding picker (1/8, 1/16 to start)
* Rounding to 8ths mostly done - still need to test corner cases
* [Off camera: make CalculatorTests use number() where it simplifies tests]

CALC-23-12: 2023-06-12 - (Unbalanced Parentheses))
* Parenthesis error checking
* Make evaluate pull sequence of number and unit into a value, so all the operators don't have to check for it
* Did a little exploration of why UI tests are slow (inconclusive)
* Add a picker for "show as" - either inches or yards-feet-inches (UI only)

CALC-23-11: 2023-06-07 - Negation
* Remove Operator.make()
* Plus-or-minus -  5 +/- => -5
* Error for +/- first or after an operator
* Replace .add etc with .binary
* Test +/- with 0
* Parentheses - without error checking

CALC-23-10: 2023-06-06 - Exceptional Numbers
* Infinity and NaN for operators
* Give Value the four operators +-*/; use for Operator
* Make Entry operators hold an Operator

CALC-23-09: 2023-06-05 - Backspace
* Implement the backspace key
* Introduce an "Entry" enum for the types of elements like number or operator
* Reorganize Keypad to return an Entry, Calculator to use it and store it in InputBuffer.
* Display negative numbers - 0in-17in=  -1 ft -5 in
* Started moving Operator into Entry

CALC-23-08: 2023-06-01 - Parse and Evaluate at '='
* Change input as String to [String]
* Change input to be a Stack<String>
* Type the whole expression before = evaluates
* Eliminate pending & lastOperator in Calculator
* Introduced Expression and InputBuffer types
* No purple errors today, so we're assuming we've fixed it

CALC-23-07: 2023-05-31 - Full Unit Input
* Make Keypad a struct
* Try to eliminate purple runtime errors by removing @StateObject from ContentViewTests
* Add spaces before and after units
* Make "ft 3 in 2" == "3 ft 2 in" for input
* "ft=" should be error
* What about "3 yd ft 2 in"? (Should only take last unit)
* What about "5 ft 2" - is an error
* Show most recent operator in the display
* If you hit two operators in a row, the last one should win
* Developed an input buffer, with simple editing, that captures the whole expression

CALC-23-06: 2023-05-30 - Associativity
* [Off camera] Improve system tests to accept all keystrokes and show file/line of errors
* Simplify Value.plus
* Stack object
* Operator objects
* Subtraction - check that associativity is correct
* Multiplication - check that precedence is correct
* Split out a separate result so the display shows it when the operand stack is empty - and that result starts with 0.

CALC-23-05: 2023-05-29 - Yards-Feet-Inches Input
* Parse yard/feet/inches
* Error handling on display side - give .error a string
* Addition with units
* Simple subtraction (no associativity yet)
* Simplify our system tests
* Tried but failed to eliminate purple errors - made Keypad press pass the calculator instead of doing it in the init

CALC-23-04: 2023-05-25 - Yards-Feet-Inches
* Changed Regex to use /notation/ and eliminate try-catch
* Make all units in inches
* Move parsing to Value
* Introduce ImperialFormatter to display unit values properly
* Display as yards-feet-inches

CALC-23-03: 2023-05-24 - Enter Units
* Switched Calculator to separate "pending" (entered string) from display
* Make display pull from either pending or value
* The = evaluates a pending into a value if needed
* What if you enter multiple leading zeros? They go away when you hit =.
* Handle invalid input
* Allow entering inches

CALC-23-02: 2023-05-23 - ViewInspector Tests
* Off camera: installed SwiftLint, fixed its warnings
* Off camera: remove unused UI tests
* Check that = properly resets the display
* Create ViewInspector test to check digit keypress
* Make uncommitted number be in italics
* Clear key
* Use Buttons on keys

CALC-23-01: 2023-05-22 - Introducing InchCalc
InchCalc - new project
* Created Key, Keypad, and Calculator
* Created initial view
* Reorganize how Calculator and Keypad are owned
* Test Key.action
